import { Zone } from '~/models/zone.model';
import { Ability } from '../../abilities/ability';
import { Filter } from '../filter/filter';
import { Outcome } from './outcome';

export abstract class Target {
  abstract isChosen(): boolean;
  abstract doneChoosing(): boolean;
  abstract clearChosen(): void;
  abstract isNotTarget(): boolean;
  abstract setNotTarget(): boolean;
  abstract canChoose(sourcePlayerId: string, source?: Ability): boolean;
  abstract possibleTargets(sourcePlayerId: string, source: Ability): string[];
  abstract chooseTarget(outcome: Outcome, playerId: string, source: Ability): boolean;
  abstract addTarget(id: string, source: Ability, amount?: number, skipEvent?: boolean): void;
  abstract canTarget(id: string, source?: Ability): boolean;
  abstract stillLegalTarget(id: string, source: Ability): boolean;
  abstract canTargetPlayer(playerId: string, id: string, source: Ability): boolean;
  abstract isLegal(source: Ability): boolean;
  abstract choose(outcome: Outcome, playerId: string, sourceId: string, source: Ability): boolean;
  abstract add(id: string): void;
  abstract remove(id: string): void;
  abstract updateTarget(targetId: string): void;
  abstract getZone(): Zone;
  abstract getTargetAmount(targetId: string): number;
  abstract getNumberOfTargets(): number;
  abstract getMinNumberOfTargets(): number;
  abstract getMaxNumberOfTargets(): number;
  abstract setMinNumberOfTargets(num: number): void;
  abstract setMaxNumberOfTargets(num: number): void;
  abstract getTargets(): string[];
  abstract isRequired(): boolean;
  abstract isSourceRequired(sourceId: string): boolean;
  abstract isAbilityRequired(ability: Ability): boolean;
  abstract setRequired(required: boolean): void;
  abstract isRandom(): boolean;
  abstract setRandom(random: boolean): void;
  abstract getFirstTarget(): string;
  abstract setTargetController(id: string): void;
  abstract getTargetController(): string;
  abstract setAbilityController(id: string): void;
  abstract getAbilityController(): string;
  abstract contains(targetId: string): boolean;
  abstract getFilter(): Filter<boolean>;
}
